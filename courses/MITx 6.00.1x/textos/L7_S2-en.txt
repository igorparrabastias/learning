...
Once you've written your code, you're
ready to start testing and debugging.
And one of the things you want to do
is to set yourself up so that that testing and debugging is
going to be easy to do.
And there's a set of very general guidelines
that you could think about here.
First of all, design your code so that it easily
supports testing and debugging.
And that means doing things like breaking the program up
into simple modules, self-contained modules, that
can be easily tested and debugged individually.
Second thing you want to do, is make
sure you write those document constraints, those doc strings
on the modules.
What did you expect the input to be?
What did you expect the output to be?
That's going to give you information that's
going to help you design both testing
and debugging, because you know what you want
to look at in terms of test cases
that make sure the module's behaving the way you expected
it to.
Third, document the assumptions you made about code design.
What was your thinking process when you created this code?
What were the assumptions that you
were making that let this code be
built in this particular way?
Because that's also going to guide
the creation of a particular test cases
to make sure that your assumptions are in fact valid,
or that the code is being entered in a manner
that supports those assumptions.
These are obvious statements.
These are things that you can sort of say, of course,
I want to do them.
And in some sense, they are examples
of a motherhood and apple pie approach
to testing and debugging.
I use that phrase because it refers
to something that is so clear cut, obvious to do,
that you would never question it.
And I raise it because unfortunately many programmers
don't do this.
They think it's so obvious that they
don't bother to write the document constraints.
They don't bother to document the assumptions
that they want to use in here.
And I encourage you to get into the habit of doing that now,
because it's going to make it so much easier for you to write,
and test, and debug code as you go forward.
So once you've actually written your code,
when are you ready to test?
Well, the first thing you want to do
is ensure that the code actually runs,
kind of an obvious statement.
But that, especially in Python, will
let you remove syntax errors.
It will catch them before you can go.
And it will typically allow you to remove
most of the static semantic errors, things
that simply don't form a well-formed expression.
Again, Python interpreter is pretty
good at finding most of those for you.
Once you know your code runs, the second thing to do
is to write a list of expected results.
Create a set of inputs, and for each one,
what you expect the result to be,
so that when you run the code, you
can spot the places where it isn't
doing the right kind of thing.
Having put that together, there's a set of tests
that you want to run, and those fall
into two different categories.
The first one is what we call unit testing.
The idea is take each module, each function
in your collection, and test it.
Validate it to make sure that it's doing the right thing,
doing it properly.
Test each function separately.
Once you've done that, what you're
going to want to do as well, is go back and retest.
And what I mean by that is the following.
If you're testing a function, you may find a bug.
Having found it you correct it, and you think, OK, I'm set.
Let me move on.
But in fact, in the correction, you
may have introduced something else.
Or even if you corrected a first bug in a second bug,
the correction to the second bug may
have re-introduced a problem with the thing that
was causing the first bug.
So do what is called regression testing, in which you go back
around and catch re-introduced errors
that were fixed previously, by after each fix, testing again
the same unit.
And then finally, do what we call integration testing, which
is having debugged each of the pieces,
now you need to make sure that they hand off information
correctly to each other.
And so test the entire overall program.
Many people, unfortunately, do this last point.
They're in a hurry, so they just run all of the code
and they get a bug.
And then they go, oh my goodness, where is it?
So don't rush to do the integration testing.
Make sure that you've done the unit testing, and especially
the regression testing, so that you know all of the units
work well before you do the integration testing.
And finally, what you're going to discover
is, after you've done regression testing,
you're going to want to go back and do unit testing.
And after you've done integration testing,
you'll discover that something wasn't working,
and you're going to have to go back again and redo the unit
testing.
But eventually you're going to get
code that does what you wanted.
How do you do the testing?
Well, there are a couple of things
that we want to suggest here.
The first one is to use your intuition
about natural boundaries in the problem.
For example, I've got a little function here which is testing,
is x bigger than y?
And I've simply said, I'm going to assume x and y are ints.
I'm going to retune true if y is less than x, otherwise false.
I want to think about, where are some natural places
to test that?
Where are places in the numbers that
are going to be natural things to look at?
If there is no natural partition,
I'll come back to that in a second,
you might just do random testing,
just pick things at random.
And the probability that the code is correct
increases with the more tests you can run.
Those are certainly possible ways of dealing with it.
But sometimes, a better way to do it
is to do what we call black box testing and glass box testing.
Black box testing explores all the paths
through the specification of the code.
And glass box testing explorers actually all of the paths
through the code itself.
So let's look at both of those.
Black box testing.
I've got a docs string for a procedure here, square root.
It assumes x and epsilon are floats.
x is greater than or equal to 0, epsilon's greater than 0,
and it's going to return the results such
that, the result squared is between x and x minus epsilon
and x plus epsilon.
In black box testing I never look at the code.
I just look at the spec.
And in fact it could be done by somebody other
than the implementer, which is sometimes nice because you
avoid implicit biases that you might have had in doing
the creation of the code.
The testing can be re-used, if the implementation changes it.
And what I want to do is think about all--
what are the test cases that would deal
with all the different ways in which I might
go through this specification?
Are there natural places to it?
For example, if I've got a procedure that's
operating on lists, I'd like to do it on an empty list,
on a list of 1, on a list of many.
If I'm doing something that deals with numbers,
I might want to do it on small numbers and large numbers.
And I'm going to ask, as I've said,
and I'm going to show you an example in a second,
are there natural places, natural boundaries,
in the inputs that I'd like to look at?
So for example, with square root.
Here are some examples of cases I'd like to deal with.
First of all, I certainly want to look
at x equals 0, because that's one of the boundary conditions
here.
So I'll do that with x equals 0 and a small epsilon.
I might also want to look at a perfect square,
because as I know, squares that are-- sorry,
numbers that are perfect squares,
my code might do something different on them than it will
do on other kinds of things.
I might want to pick a number less than 1.
I know with squares, square root behaves differently
when it's a fraction than it does when it's a larger number.
And I might want to take something
where I know that the answer is not a perfect square.
There's an irrational square root in it.
I've just picked four boundary conditions that are nice.
Another set of things I might do is just look at extremes.
What happens when I have a reasonable number, and a really
large epsilon?
What happens when I have a really large number?
Sorry, a really small number, or a really large number,
and a really large epsilon?
And same thing the other direction,
with a really small-- sorry I did that wrong.
These are really small epsilons.
I apologize.
Those are really large epsilons.
These are all examples of extreme versions of cases
that I could use as I'm doing black box testing.

Glass box testing is looking at inside this black box.
It's looking at the code itself.
And it uses the code directly to guide the design of test cases.
Ideally, I would want to have a different test
case for each different path through the code.
And when I say different path, if this
is something that has branches, I
want to make sure that I have something
that tests each possible branch of the code.
We'll say that a glass box test suite is path complete
if every potential path through the code
is tested at least once.
Part of the problem here is sometimes
I can't always guarantee that.
If this is a recursive function that
can have arbitrary arguments to it, I can't guarantee it.
And so I have to be willing to settle for testing most
but maybe not all of the paths.
So that's one drawback to this, and I might miss some paths.
Again guidelines here are to look for branches,
and make sure that I take each branch,
if there's an explicit branch inside of it.
If I've got a four loop in there,
I want to have a test case where I don't actually
go into the loop.
Or where I go through the body of the loop exactly once,
or more than once.
Same thing for a while loops.
Look for cases that catch all the different ways
to execute out of the loop.
And this is going to give me a way
to try and figure out different ways to test as many
of the paths through the loop-- sorry,
through the code as I possibly can.
So here's an example of glass box testing.
I've got a little thing that's going
to compute absolute value, and it basically
is going to return minus x of s if x is less than minus 1
and return x otherwise.
One of the problems with path complete
is I could actually miss a bug.
And I'll show you an example.
Here are two cases.
2n minus 2.
It's path complete, in that one of them
is going to take this path, and one of them's
going to take that path.
But it's going to miss a bug, because abs of minus 1
incorrectly returns minus 1 in this case.
And so I should still look for boundary conditions, which
I would have gotten by thinking about what is happening right
there, in order to make sure I test all of the possible ways
through the code.